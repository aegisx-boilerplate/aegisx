{
  "version": 3,
  "sources": ["../../../../../../../../apps/fastify-server/src/app/routes/test-core.ts"],
  "sourcesContent": ["import { FastifyInstance } from 'fastify';\n\nexport default async function (fastify: FastifyInstance) {\n    // Test importing simple functions from @aegisx/core\n    fastify.get('/test-core', async function () {\n        try {\n            // Import simple functions that should be available  \n            const coreModule = require('@aegisx/core');\n\n            return {\n                success: true,\n                message: 'Successfully imported @aegisx/core!',\n                availableExports: Object.keys(coreModule),\n                exportTypes: Object.keys(coreModule).reduce((acc, key) => {\n                    acc[key] = typeof (coreModule as any)[key];\n                    return acc;\n                }, {} as any)\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: 'Failed to import @aegisx/core',\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    });\n\n    // Test specific simple functions\n    fastify.get('/test-core/simple', async function () {\n        try {\n            const {\n                getVersion,\n                getPackageName,\n                isAegisXAvailable,\n                getFeatures\n            } = require('@aegisx/core');\n\n            return {\n                success: true,\n                message: 'Successfully called simple functions!',\n                data: {\n                    version: getVersion(),\n                    packageName: getPackageName(),\n                    isAvailable: isAegisXAvailable(),\n                    features: getFeatures()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: 'Failed to call simple functions',\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    });\n\n    // Test createAegisXSimple function\n    fastify.get('/test-core/init', async function () {\n        try {\n            const { createAegisXSimple } = require('@aegisx/core');\n\n            const config = {\n                database: {\n                    host: 'localhost',\n                    port: 5432,\n                    database: 'test_db'\n                },\n                jwt: {\n                    secret: 'test-secret-key',\n                    expiresIn: '15m'\n                }\n            };\n\n            await createAegisXSimple(config);\n\n            return {\n                success: true,\n                message: 'AegisX Simple initialization completed successfully!',\n                config: 'provided'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: 'Failed to initialize AegisX Simple',\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    });\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,eAAO,kBAAwB,SAA0B;AAErD,UAAQ,IAAI,cAAc,iBAAkB;AACxC,QAAI;AAEA,YAAM,aAAa,QAAQ,cAAc;AAEzC,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,kBAAkB,OAAO,KAAK,UAAU;AAAA,QACxC,aAAa,OAAO,KAAK,UAAU,EAAE,OAAO,CAAC,KAAK,QAAQ;AACtD,cAAI,GAAG,IAAI,OAAQ,WAAmB,GAAG;AACzC,iBAAO;AAAA,QACX,GAAG,CAAC,CAAQ;AAAA,MAChB;AAAA,IACJ,SAAS,OAAO;AACZ,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ,CAAC;AAGD,UAAQ,IAAI,qBAAqB,iBAAkB;AAC/C,QAAI;AACA,YAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,IAAI,QAAQ,cAAc;AAE1B,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,UACF,SAAS,WAAW;AAAA,UACpB,aAAa,eAAe;AAAA,UAC5B,aAAa,kBAAkB;AAAA,UAC/B,UAAU,YAAY;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ,CAAC;AAGD,UAAQ,IAAI,mBAAmB,iBAAkB;AAC7C,QAAI;AACA,YAAM,EAAE,mBAAmB,IAAI,QAAQ,cAAc;AAErD,YAAM,SAAS;AAAA,QACX,UAAU;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACd;AAAA,QACA,KAAK;AAAA,UACD,QAAQ;AAAA,UACR,WAAW;AAAA,QACf;AAAA,MACJ;AAEA,YAAM,mBAAmB,MAAM;AAE/B,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QAAQ;AAAA,MACZ;AAAA,IACJ,SAAS,OAAO;AACZ,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;",
  "names": []
}
