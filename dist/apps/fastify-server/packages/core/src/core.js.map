{
  "version": 3,
  "sources": ["../../../../../../packages/core/src/core.ts"],
  "sourcesContent": ["/**\n * AegisX Core Configuration\n * \n * Main initialization function for the AegisX authentication\n * and authorization system.\n */\n\nimport type { AegisXConfig } from './types/config';\n\n/**\n * Initialize AegisX with the provided configuration\n * \n * @param config - AegisX configuration object\n * @returns Promise that resolves when initialization is complete\n * \n * @example\n * ```typescript\n * await createAegisX({\n *   database: {\n *     host: 'localhost',\n *     port: 5432,\n *     database: 'myapp',\n *     user: 'postgres',\n *     password: 'password'\n *   },\n *   jwt: {\n *     secret: 'your-secret-key',\n *     expiresIn: '15m'\n *   }\n * });\n * ```\n */\nexport async function createAegisX(config: AegisXConfig): Promise<void> {\n    console.log('\uD83D\uDD27 Initializing AegisX...');\n\n    // Phase 2.2 - Initialize database connection\n    console.log('\uD83D\uDDC4\uFE0F Connecting to database...');\n    const { initializeDatabase } = await import('./database');\n    await initializeDatabase(config.database);\n\n    // Phase 2.3 - Setup JWT service\n    console.log('\uD83D\uDD11 Setting up authentication...');\n\n    // Initialize default JWT config if not provided\n    const jwtConfig = config.jwt || {\n        secret: process.env['JWT_SECRET'] || 'aegisx-default-secret-change-in-production',\n        expiresIn: '15m',\n        refreshSecret: process.env['JWT_REFRESH_SECRET'],\n        refreshExpiresIn: '7d'\n    };\n\n    // Create authentication service instance for initialization\n    const { AuthService } = await import('./auth');\n    const authService = new AuthService(jwtConfig, undefined, undefined);\n\n    console.log('\u2713 Authentication system initialized');\n\n    // TODO: Phase 2.4 - Initialize RBAC system\n    console.log('\uD83D\uDEE1\uFE0F  Setting up authorization...');\n\n    // TODO: Phase 2.5 - Initialize user management\n    console.log('\uD83D\uDC65 Setting up user management...');\n\n    console.log('\u2705 AegisX initialized successfully!');\n}\n\n/**\n * Get the current AegisX version\n */\nexport function getVersion(): string {\n    return '0.0.1';\n}\n\n/**\n * Check if AegisX is properly initialized\n */\nexport function isInitialized(): boolean {\n    // TODO: Implement initialization check\n    return false;\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA,eAAsB,aAAa,QAAqC;AACpE,UAAQ,IAAI,kCAA2B;AAGvC,UAAQ,IAAI,2CAA+B;AAC3C,QAAM,EAAE,mBAAmB,IAAI,MAAM,OAAO,YAAY;AACxD,QAAM,mBAAmB,OAAO,QAAQ;AAGxC,UAAQ,IAAI,wCAAiC;AAG7C,QAAM,YAAY,OAAO,OAAO;AAAA,IAC5B,QAAQ,QAAQ,IAAI,YAAY,KAAK;AAAA,IACrC,WAAW;AAAA,IACX,eAAe,QAAQ,IAAI,oBAAoB;AAAA,IAC/C,kBAAkB;AAAA,EACtB;AAGA,QAAM,EAAE,YAAY,IAAI,MAAM,OAAO,QAAQ;AAC7C,QAAM,cAAc,IAAI,YAAY,WAAW,QAAW,MAAS;AAEnE,UAAQ,IAAI,0CAAqC;AAGjD,UAAQ,IAAI,8CAAkC;AAG9C,UAAQ,IAAI,yCAAkC;AAE9C,UAAQ,IAAI,yCAAoC;AACpD;AAKO,SAAS,aAAqB;AACjC,SAAO;AACX;AAKO,SAAS,gBAAyB;AAErC,SAAO;AACX;",
  "names": []
}
