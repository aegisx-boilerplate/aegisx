{
  "version": 3,
  "sources": ["../../../../../../../packages/core/src/database/connection.ts"],
  "sourcesContent": ["/**\n * Database Connection\n * \n * Manages database connections using Knex.js\n */\n\nimport knex, { type Knex } from 'knex';\nimport type { DatabaseConfig } from '../types/config';\nimport { createKnexConfig } from './config';\n\nlet database: Knex | null = null;\n\n/**\n * Initialize database connection\n */\nexport async function initializeDatabase(config: DatabaseConfig): Promise<Knex> {\n    if (database) {\n        console.warn('Database connection already initialized');\n        return database;\n    }\n\n    try {\n        const knexConfig = createKnexConfig(config);\n        database = knex(knexConfig);\n\n        // Test the connection\n        await database.raw('SELECT 1');\n\n        console.log('\u2705 Database connection established successfully');\n        return database;\n    } catch (error) {\n        console.error('\u274C Failed to connect to database:', error);\n        throw new Error(`Database connection failed: ${error}`);\n    }\n}\n\n/**\n * Get the current database instance\n */\nexport function getDatabase(): Knex {\n    if (!database) {\n        throw new Error('Database not initialized. Call initializeDatabase() first.');\n    }\n    return database;\n}\n\n/**\n * Close database connection\n */\nexport async function closeDatabase(): Promise<void> {\n    if (database) {\n        await database.destroy();\n        database = null;\n        console.log('\uD83D\uDCE1 Database connection closed');\n    }\n}\n\n/**\n * Check if database is connected\n */\nexport function isDatabaseConnected(): boolean {\n    return database !== null;\n}\n\n/**\n * Run database migrations\n */\nexport async function runMigrations(): Promise<void> {\n    const db = getDatabase();\n    await db.migrate.latest();\n    console.log('\uD83D\uDD04 Database migrations completed');\n}\n\n/**\n * Rollback last migration\n */\nexport async function rollbackMigration(): Promise<void> {\n    const db = getDatabase();\n    await db.migrate.rollback();\n    console.log('\u23EA Database migration rolled back');\n}\n\n/**\n * Run database seeds\n */\nexport async function runSeeds(): Promise<void> {\n    const db = getDatabase();\n    await db.seed.run();\n    console.log('\uD83C\uDF31 Database seeds completed');\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,kBAAgC;AAEhC,oBAAiC;AAEjC,IAAI,WAAwB;AAK5B,eAAsB,mBAAmB,QAAuC;AAC5E,MAAI,UAAU;AACV,YAAQ,KAAK,yCAAyC;AACtD,WAAO;AAAA,EACX;AAEA,MAAI;AACA,UAAM,iBAAa,gCAAiB,MAAM;AAC1C,mBAAW,YAAAA,SAAK,UAAU;AAG1B,UAAM,SAAS,IAAI,UAAU;AAE7B,YAAQ,IAAI,qDAAgD;AAC5D,WAAO;AAAA,EACX,SAAS,OAAO;AACZ,YAAQ,MAAM,yCAAoC,KAAK;AACvD,UAAM,IAAI,MAAM,+BAA+B,KAAK,EAAE;AAAA,EAC1D;AACJ;AAKO,SAAS,cAAoB;AAChC,MAAI,CAAC,UAAU;AACX,UAAM,IAAI,MAAM,4DAA4D;AAAA,EAChF;AACA,SAAO;AACX;AAKA,eAAsB,gBAA+B;AACjD,MAAI,UAAU;AACV,UAAM,SAAS,QAAQ;AACvB,eAAW;AACX,YAAQ,IAAI,sCAA+B;AAAA,EAC/C;AACJ;AAKO,SAAS,sBAA+B;AAC3C,SAAO,aAAa;AACxB;AAKA,eAAsB,gBAA+B;AACjD,QAAM,KAAK,YAAY;AACvB,QAAM,GAAG,QAAQ,OAAO;AACxB,UAAQ,IAAI,yCAAkC;AAClD;AAKA,eAAsB,oBAAmC;AACrD,QAAM,KAAK,YAAY;AACvB,QAAM,GAAG,QAAQ,SAAS;AAC1B,UAAQ,IAAI,uCAAkC;AAClD;AAKA,eAAsB,WAA0B;AAC5C,QAAM,KAAK,YAAY;AACvB,QAAM,GAAG,KAAK,IAAI;AAClB,UAAQ,IAAI,oCAA6B;AAC7C;",
  "names": ["knex"]
}
