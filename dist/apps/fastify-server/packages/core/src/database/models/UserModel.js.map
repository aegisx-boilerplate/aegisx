{
  "version": 3,
  "sources": ["../../../../../../../../packages/core/src/database/models/UserModel.ts"],
  "sourcesContent": ["/**\n * User Database Model\n */\n\nimport { getDatabase } from '../connection';\nimport type { User } from '../../types/user';\nimport type { ID } from '../../types/core';\n\nexport const USER_TABLE = 'users';\n\n/**\n * User Model for database operations\n */\nexport class UserModel {\n    /**\n     * Find user by ID\n     */\n    static async findById(id: ID): Promise<User | null> {\n        const db = getDatabase();\n        const user = await db(USER_TABLE).where({ id }).first();\n        return user || null;\n    }\n\n    /**\n     * Find user by email\n     */\n    static async findByEmail(email: string): Promise<User | null> {\n        const db = getDatabase();\n        const user = await db(USER_TABLE).where({ email }).first();\n        return user || null;\n    }\n\n    /**\n     * Create new user\n     */\n    static async create(userData: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {\n        const db = getDatabase();\n        const [user] = await db(USER_TABLE)\n            .insert({\n                ...userData,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            })\n            .returning('*');\n        return user;\n    }\n\n    /**\n     * Update user\n     */\n    static async update(id: ID, userData: Partial<User>): Promise<User | null> {\n        const db = getDatabase();\n        const [user] = await db(USER_TABLE)\n            .where({ id })\n            .update({\n                ...userData,\n                updatedAt: new Date()\n            })\n            .returning('*');\n        return user || null;\n    }\n\n    /**\n     * Delete user\n     */\n    static async delete(id: ID): Promise<boolean> {\n        const db = getDatabase();\n        const deleted = await db(USER_TABLE).where({ id }).del();\n        return deleted > 0;\n    }\n\n    /**\n     * List users with pagination\n     */\n    static async list(offset = 0, limit = 10): Promise<User[]> {\n        const db = getDatabase();\n        return await db(USER_TABLE)\n            .offset(offset)\n            .limit(limit)\n            .orderBy('createdAt', 'desc');\n    }\n\n    /**\n     * Count total users\n     */\n    static async count(): Promise<number> {\n        const db = getDatabase();\n        const [{ count }] = await db(USER_TABLE).count('* as count');\n        return parseInt(count as string);\n    }\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,wBAA4B;AAIrB,MAAM,aAAa;AAKnB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,EAInB,aAAa,SAAS,IAA8B;AAChD,UAAM,SAAK,+BAAY;AACvB,UAAM,OAAO,MAAM,GAAG,UAAU,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,MAAM;AACtD,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,YAAY,OAAqC;AAC1D,UAAM,SAAK,+BAAY;AACvB,UAAM,OAAO,MAAM,GAAG,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM;AACzD,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO,UAAuE;AACvF,UAAM,SAAK,+BAAY;AACvB,UAAM,CAAC,IAAI,IAAI,MAAM,GAAG,UAAU,EAC7B,OAAO;AAAA,MACJ,GAAG;AAAA,MACH,WAAW,oBAAI,KAAK;AAAA,MACpB,WAAW,oBAAI,KAAK;AAAA,IACxB,CAAC,EACA,UAAU,GAAG;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO,IAAQ,UAA+C;AACvE,UAAM,SAAK,+BAAY;AACvB,UAAM,CAAC,IAAI,IAAI,MAAM,GAAG,UAAU,EAC7B,MAAM,EAAE,GAAG,CAAC,EACZ,OAAO;AAAA,MACJ,GAAG;AAAA,MACH,WAAW,oBAAI,KAAK;AAAA,IACxB,CAAC,EACA,UAAU,GAAG;AAClB,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO,IAA0B;AAC1C,UAAM,SAAK,+BAAY;AACvB,UAAM,UAAU,MAAM,GAAG,UAAU,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,IAAI;AACvD,WAAO,UAAU;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,KAAK,SAAS,GAAG,QAAQ,IAAqB;AACvD,UAAM,SAAK,+BAAY;AACvB,WAAO,MAAM,GAAG,UAAU,EACrB,OAAO,MAAM,EACb,MAAM,KAAK,EACX,QAAQ,aAAa,MAAM;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAyB;AAClC,UAAM,SAAK,+BAAY;AACvB,UAAM,CAAC,EAAE,MAAM,CAAC,IAAI,MAAM,GAAG,UAAU,EAAE,MAAM,YAAY;AAC3D,WAAO,SAAS,KAAe;AAAA,EACnC;AACJ;",
  "names": []
}
