{
  "version": 3,
  "sources": ["../../../../../../../../packages/core/src/database/models/SessionModel.ts"],
  "sourcesContent": ["/**\n * Session Database Model\n */\n\nimport { getDatabase } from '../connection';\nimport type { ID } from '../../types/core';\n\nexport const SESSION_TABLE = 'sessions';\n\n/**\n * Session interface\n */\nexport interface Session {\n    id: ID;\n    userId: ID;\n    token: string;\n    expiresAt: Date;\n    createdAt: Date;\n    updatedAt: Date;\n}\n\n/**\n * Session Model for database operations\n */\nexport class SessionModel {\n    /**\n     * Find session by token\n     */\n    static async findByToken(token: string): Promise<Session | null> {\n        const db = getDatabase();\n        const session = await db(SESSION_TABLE).where({ token }).first();\n        return session || null;\n    }\n\n    /**\n * Create new session\n */\n    static async create(sessionData: Omit<Session, 'id' | 'createdAt' | 'updatedAt'>): Promise<Session> {\n        const db = getDatabase();\n        const [session] = await db(SESSION_TABLE)\n            .insert({\n                ...sessionData,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            })\n            .returning('*');\n        return session;\n    }\n\n    /**\n     * Update session\n     */\n    static async update(id: ID, sessionData: Partial<Session>): Promise<Session | null> {\n        const db = getDatabase();\n        const [session] = await db(SESSION_TABLE)\n            .where({ id })\n            .update({\n                ...sessionData,\n                updatedAt: new Date()\n            })\n            .returning('*');\n        return session || null;\n    }\n\n    /**\n     * Delete session\n     */\n    static async delete(id: ID): Promise<boolean> {\n        const db = getDatabase();\n        const deleted = await db(SESSION_TABLE).where({ id }).del();\n        return deleted > 0;\n    }\n\n    /**\n     * Find session by ID\n     */\n    static async findById(id: ID): Promise<Session | null> {\n        const db = getDatabase();\n        const session = await db(SESSION_TABLE).where({ id }).first();\n        return session || null;\n    }\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,wBAA4B;AAGrB,MAAM,gBAAgB;AAiBtB,MAAM,aAAa;AAAA;AAAA;AAAA;AAAA,EAItB,aAAa,YAAY,OAAwC;AAC7D,UAAM,SAAK,+BAAY;AACvB,UAAM,UAAU,MAAM,GAAG,aAAa,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM;AAC/D,WAAO,WAAW;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO,aAAgF;AAChG,UAAM,SAAK,+BAAY;AACvB,UAAM,CAAC,OAAO,IAAI,MAAM,GAAG,aAAa,EACnC,OAAO;AAAA,MACJ,GAAG;AAAA,MACH,WAAW,oBAAI,KAAK;AAAA,MACpB,WAAW,oBAAI,KAAK;AAAA,IACxB,CAAC,EACA,UAAU,GAAG;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO,IAAQ,aAAwD;AAChF,UAAM,SAAK,+BAAY;AACvB,UAAM,CAAC,OAAO,IAAI,MAAM,GAAG,aAAa,EACnC,MAAM,EAAE,GAAG,CAAC,EACZ,OAAO;AAAA,MACJ,GAAG;AAAA,MACH,WAAW,oBAAI,KAAK;AAAA,IACxB,CAAC,EACA,UAAU,GAAG;AAClB,WAAO,WAAW;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO,IAA0B;AAC1C,UAAM,SAAK,+BAAY;AACvB,UAAM,UAAU,MAAM,GAAG,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,IAAI;AAC1D,WAAO,UAAU;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,SAAS,IAAiC;AACnD,UAAM,SAAK,+BAAY;AACvB,UAAM,UAAU,MAAM,GAAG,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,MAAM;AAC5D,WAAO,WAAW;AAAA,EACtB;AACJ;",
  "names": []
}
