{
  "version": 3,
  "sources": ["../../../../../../../packages/core/src/database/config.ts"],
  "sourcesContent": ["/**\n * Database Configuration\n * \n * Knex.js configuration for PostgreSQL database connection\n */\n\nimport type { Knex } from 'knex';\nimport type { DatabaseConfig } from '../types/config';\n\n/**\n * Create Knex configuration from AegisX database config\n */\nexport function createKnexConfig(dbConfig: DatabaseConfig): Knex.Config {\n    return {\n        client: 'postgresql',\n        connection: {\n            host: dbConfig.host,\n            port: dbConfig.port,\n            database: dbConfig.database,\n            user: dbConfig.user,\n            password: dbConfig.password,\n            ssl: dbConfig.ssl\n        },\n        pool: {\n            min: dbConfig.pool?.min || 2,\n            max: dbConfig.pool?.max || 10\n        },\n        migrations: {\n            directory: './migrations',\n            tableName: 'aegisx_migrations'\n        },\n        seeds: {\n            directory: './seeds'\n        }\n    };\n}\n\n/**\n * Default database configuration for development\n */\nexport const defaultDatabaseConfig: DatabaseConfig = {\n    host: process.env['DB_HOST'] || 'localhost',\n    port: parseInt(process.env['DB_PORT'] || '5432'),\n    database: process.env['DB_NAME'] || 'aegisx_dev',\n    user: process.env['DB_USER'] || 'postgres',\n    password: process.env['DB_PASSWORD'] || 'password',\n    ssl: process.env['DB_SSL'] === 'true',\n    pool: {\n        min: 2,\n        max: 10\n    }\n};\n\n/**\n * Test database configuration\n */\nexport const testDatabaseConfig: DatabaseConfig = {\n    host: process.env['DB_TEST_HOST'] || 'localhost',\n    port: parseInt(process.env['DB_TEST_PORT'] || '5432'),\n    database: process.env['DB_TEST_NAME'] || 'aegisx_test',\n    user: process.env['DB_TEST_USER'] || 'postgres',\n    password: process.env['DB_TEST_PASSWORD'] || 'password',\n    ssl: false,\n    pool: {\n        min: 1,\n        max: 5\n    }\n}; "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAAS,iBAAiB,UAAuC;AACpE,SAAO;AAAA,IACH,QAAQ;AAAA,IACR,YAAY;AAAA,MACR,MAAM,SAAS;AAAA,MACf,MAAM,SAAS;AAAA,MACf,UAAU,SAAS;AAAA,MACnB,MAAM,SAAS;AAAA,MACf,UAAU,SAAS;AAAA,MACnB,KAAK,SAAS;AAAA,IAClB;AAAA,IACA,MAAM;AAAA,MACF,KAAK,SAAS,MAAM,OAAO;AAAA,MAC3B,KAAK,SAAS,MAAM,OAAO;AAAA,IAC/B;AAAA,IACA,YAAY;AAAA,MACR,WAAW;AAAA,MACX,WAAW;AAAA,IACf;AAAA,IACA,OAAO;AAAA,MACH,WAAW;AAAA,IACf;AAAA,EACJ;AACJ;AAKO,MAAM,wBAAwC;AAAA,EACjD,MAAM,QAAQ,IAAI,SAAS,KAAK;AAAA,EAChC,MAAM,SAAS,QAAQ,IAAI,SAAS,KAAK,MAAM;AAAA,EAC/C,UAAU,QAAQ,IAAI,SAAS,KAAK;AAAA,EACpC,MAAM,QAAQ,IAAI,SAAS,KAAK;AAAA,EAChC,UAAU,QAAQ,IAAI,aAAa,KAAK;AAAA,EACxC,KAAK,QAAQ,IAAI,QAAQ,MAAM;AAAA,EAC/B,MAAM;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AAAA,EACT;AACJ;AAKO,MAAM,qBAAqC;AAAA,EAC9C,MAAM,QAAQ,IAAI,cAAc,KAAK;AAAA,EACrC,MAAM,SAAS,QAAQ,IAAI,cAAc,KAAK,MAAM;AAAA,EACpD,UAAU,QAAQ,IAAI,cAAc,KAAK;AAAA,EACzC,MAAM,QAAQ,IAAI,cAAc,KAAK;AAAA,EACrC,UAAU,QAAQ,IAAI,kBAAkB,KAAK;AAAA,EAC7C,KAAK;AAAA,EACL,MAAM;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AAAA,EACT;AACJ;",
  "names": []
}
