{
  "version": 3,
  "sources": ["../../../../../../../../packages/core/src/auth/controllers/AuthController.ts"],
  "sourcesContent": ["import { FastifyRequest, FastifyReply } from 'fastify';\nimport { Type } from '@fastify/type-provider-typebox';\nimport { AuthService } from '../AuthService';\nimport { LoginDto } from '../dto/LoginDto';\nimport { RegisterDto } from '../dto/RegisterDto';\nimport { RefreshTokenDto } from '../dto/RefreshTokenDto';\nimport { JwtPayload } from '../../types/auth';\nimport {\n    RegisterSchema,\n    LoginSchema,\n    RefreshTokenSchema,\n    RegisterResponseSchema,\n    LoginResponseSchema,\n    RefreshTokenResponseSchema,\n    ProfileResponseSchema,\n    ErrorResponseSchema\n} from '../schemas/auth.schema';\n\nexport default class AuthController {\n    constructor(private readonly authService: AuthService) { }\n\n    async register(request: FastifyRequest<{ Body: RegisterDto }>, reply: FastifyReply): Promise<void> {\n        try {\n            const result = await this.authService.register(request.body);\n            await reply.code(201).send(result);\n        } catch (error: any) {\n            const statusCode = error?.statusCode || 400;\n            const message = error?.message || 'Registration failed';\n            await reply.code(statusCode).send({ message });\n        }\n    }\n\n    async login(request: FastifyRequest<{ Body: LoginDto }>, reply: FastifyReply): Promise<void> {\n        try {\n            const result = await this.authService.login(request.body);\n            await reply.code(200).send(result);\n        } catch (error: any) {\n            const statusCode = error?.statusCode || 401;\n            const message = error?.message || 'Invalid credentials';\n            await reply.code(statusCode).send({ message });\n        }\n    }\n\n    async refreshToken(request: FastifyRequest<{ Body: RefreshTokenDto }>, reply: FastifyReply): Promise<void> {\n        try {\n            const result = await this.authService.refreshToken(request.body.refreshToken);\n            await reply.code(200).send(result);\n        } catch (error: any) {\n            const statusCode = error?.statusCode || 401;\n            const message = error?.message || 'Invalid refresh token';\n            await reply.code(statusCode).send({ message });\n        }\n    }\n\n    async logout(request: FastifyRequest, reply: FastifyReply): Promise<void> {\n        try {\n            const token = request.headers.authorization?.split(' ')[1];\n            if (!token) {\n                throw new Error('No token provided');\n            }\n            await this.authService.logout(token);\n            await reply.code(200).send({ message: 'Logged out successfully' });\n        } catch (error: any) {\n            const statusCode = error?.statusCode || 400;\n            const message = error?.message || 'Logout failed';\n            await reply.code(statusCode).send({ message });\n        }\n    }\n\n    async getProfile(request: FastifyRequest, reply: FastifyReply): Promise<void> {\n        try {\n            // TODO: Implement proper authentication middleware\n            // const user = request.user as JwtPayload | undefined;\n            // Temporary implementation\n            const authHeader = request.headers.authorization;\n            if (!authHeader) {\n                throw new Error('User not authenticated');\n            }\n            const userId = 'temp-user-id';\n            const profile = await this.authService.getProfile(userId);\n            if (!profile) {\n                throw new Error('User not found');\n            }\n            await reply.code(200).send(profile);\n        } catch (error: any) {\n            const statusCode = error?.message === 'User not found' ? 404 : 401;\n            const message = error?.message || 'Failed to get user profile';\n            await reply.code(statusCode).send({ message });\n        }\n    }\n}\n\n// Schema definitions for route registration (\u0E15\u0E32\u0E21\u0E2B\u0E25\u0E31\u0E01 fastify)\nexport const authSchemas = {\n    register: {\n        schema: {\n            body: RegisterSchema,\n            response: {\n                201: RegisterResponseSchema,\n                400: ErrorResponseSchema\n            }\n        }\n    },\n    login: {\n        schema: {\n            body: LoginSchema,\n            response: {\n                200: LoginResponseSchema,\n                401: ErrorResponseSchema\n            }\n        }\n    },\n    refreshToken: {\n        schema: {\n            body: RefreshTokenSchema,\n            response: {\n                200: RefreshTokenResponseSchema,\n                401: ErrorResponseSchema\n            }\n        }\n    },\n    logout: {\n        schema: {\n            response: {\n                200: Type.Object({ message: Type.String() }),\n                400: ErrorResponseSchema\n            }\n        }\n    },\n    getProfile: {\n        schema: {\n            response: {\n                200: ProfileResponseSchema,\n                401: ErrorResponseSchema,\n                404: ErrorResponseSchema\n            }\n        }\n    }\n}; "],
  "mappings": "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",
  "names": ["import_auth"]
}
